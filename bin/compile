#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir> <env-dir>

set -e

mkdir -p "$1" "$2"
build=$(cd "$1/" && pwd)
cache=$(cd "$2/" && pwd)
env_dir=$(cd "$3/" && pwd)

for key in SENTRY_AUTH_TOKEN SENTRY_ORG SENTRY_PROJECT SENTRY_BUILD_PATH HEROKU_ENV; do
    [[ -f "${env_dir}/${key}" ]] && export "$key=$(cat "${env_dir}/${key}")"
    [[ -z "${!key}" ]] && echo "-----> ${key} is missing or empty: unable to continue." && exit 1
done

# Prepare what we need
JQ="${cache}/sentry-jq"
if [[ ! -f "${JQ}" ]]; then
    echo "-----> Downloading jq 1.5"
    curl -sSfL "https://github.com/stedolan/jq/releases/download/jq-1.5/jq-linux64" > "${JQ}"
    chmod +x "${JQ}"
fi

API="https://sentry.io/api/0/projects/${SENTRY_ORG}/${SENTRY_PROJECT}"

# Create a release
echo "-----> Creating Sentry release ${SOURCE_VERSION} for organization '${SENTRY_ORG}' in project '${SENTRY_PROJECT}' [${HEROKU_ENV}]"

curl -sSf "${API}/releases/" \
  -X POST \
  -H "Authorization: Bearer ${SENTRY_AUTH_TOKEN}" \
  -H 'Content-Type: application/json' \
  -d "{\"version\": \"${SOURCE_VERSION}\", \"environment\": \"${HEROKU_ENV}\"}" \
  >/dev/null

# Retrieve files
files=$(mktemp)
echo "       Retrieving existing files to $files"
curl -sSf "${API}/releases/${SOURCE_VERSION}/files/" \
     -X GET \
     -H "Authorization: Bearer ${SENTRY_AUTH_TOKEN}" \
     > "$files"

echo "       Parsing build path: ${SENTRY_BUILD_PATH}"

# retrieve dist dirs
IFS="," read -r -a buildPaths <<< "${SENTRY_BUILD_PATH:-dist/app}"

# Upload the sourcemaps
#buildPath="dist/app"

echo "$(curl --version)"

for buildPath in "${buildPaths[@]}";
do
    echo "-----> Build path ${buildPath}"
    cd "${build}/${buildPath}"

    for map in $(find . -maxdepth 1 -type f \( -name "*.js" -o -name "*.js.map" \) | cut -c 3-);
    do
        sum=$(sha1sum "./${map}" | cut -c -40)
        name="~/${map}"

        # Check if we have a '.next' directory for Next.js
        # Need to modify $name to represent with BUILD_ID from Next.js
        if [ -d "./.next/" ]; then
            next_id=$(cat "./.next/BUILD_ID")
            next_path="~/_next/$next_id/"
            name="${name/"~/.next/dist/bundles/"/$next_path}"
        fi
        
        # HOTFIX
        # Map path to ~/prospect/1.xy.js.map, ~/admin/1.xy.js.map
        # Sentry requires it this way
        pathWithoutDist="${buildPath/dist\/apps\//''}"
        nameWithApp="~/${pathWithoutDist/-app/''}/${map}"

        res=($(${JQ} -r ". | map(select(.name == \"${nameWithApp}\")) | first | .id + \" \" + (.sha1 // \"\")" "${files}"))

        echo "       Res[0] = ${res[0]}"
        echo "       Res[1] = ${res[1]}"
        echo "       Sum = ${sum}"
        echo "       Map = ${map}"

        if [[ "${res[0]}" == "" ]]; then
            echo "       Uploading ${nameWithApp} to Sentry"
            curl --http1.1 \
                 -sSf "${API}/releases/${SOURCE_VERSION}/files/" \
                 -X POST \
                 -H "Authorization: Bearer ${SENTRY_AUTH_TOKEN}" \
                 -F file=@"${map}" \
                 -F name="${nameWithApp}" \
                 >/dev/null

        elif [[ "${res[1]}" != "${sum}" ]]; then
            echo "       Updating ${nameWithApp} on Sentry"
            curl -sSf "${API}/releases/${SOURCE_VERSION}/files/${res[0]}/" \
                 -X DELETE \
                 -H "Authorization: Bearer ${SENTRY_AUTH_TOKEN}" \
                 >/dev/null
            curl --http1.1 \
                 -sSf "${API}/releases/${SOURCE_VERSION}/files/" \
                 -X POST \
                 -H "Authorization: Bearer ${SENTRY_AUTH_TOKEN}" \
                 -F file=@"${map}" \
                 -F name="${nameWithApp}" \
                 >/dev/null

        else
            echo "       ${nameWithApp} is up-to-date"
        fi
        if [[ ${map} == *\.map ]]; then
            echo "Removing sourcemap ${map}"
            rm "${map}"
        fi
    done

    cd -
done

rm "${files}"

echo "       Done!"
